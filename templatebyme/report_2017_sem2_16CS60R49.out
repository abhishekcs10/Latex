\BOOKMARK [1][-]{section*.2}{List of Figures}{}% 1
\BOOKMARK [1][-]{section.1}{Introduction}{}% 2
\BOOKMARK [1][-]{section.2}{ Program vs Process vs Thread}{}% 3
\BOOKMARK [1][-]{section.3}{Motivation for Thread Extraction}{}% 4
\BOOKMARK [2][-]{subsection.3.1}{Time Sharing and Multi Tasking}{section.3}% 5
\BOOKMARK [2][-]{subsection.3.2}{Multi-Threading and Hyper-Threading}{section.3}% 6
\BOOKMARK [1][-]{section.4}{Rationale for Speculative Multithreading}{}% 7
\BOOKMARK [2][-]{subsection.4.1}{Limitations of Existing Techniques to Extract Parallelism}{section.4}% 8
\BOOKMARK [2][-]{subsection.4.2}{The Emergence of Multithreaded Architectures}{section.4}% 9
\BOOKMARK [1][-]{section.5}{Thread Extraction Policies}{}% 10
\BOOKMARK [2][-]{subsection.5.1}{Programmer Controlled}{section.5}% 11
\BOOKMARK [2][-]{subsection.5.2}{Compiler Driven}{section.5}% 12
\BOOKMARK [2][-]{subsection.5.3}{Architecture Driven}{section.5}% 13
\BOOKMARK [3][-]{subsubsection.5.3.1}{Dividing Program into Multiple Thread}{subsection.5.3}% 14
\BOOKMARK [1][-]{section.6}{The Case Studies}{}% 15
\BOOKMARK [2][-]{subsection.6.1}{Performance Measure for Programmed Thread Strategy}{section.6}% 16
\BOOKMARK [2][-]{subsection.6.2}{Performance Measure for Architecture Driven/ Compiler Based Strategy}{section.6}% 17
\BOOKMARK [1][-]{section.7}{Conclusion}{}% 18
\BOOKMARK [1][-]{section*.3}{References}{}% 19
